//###  Module  ###//
import {expect as Expect} from "./index"


//####################################################################################################################//
//##>  Setup                                                                                                        ##//
//####################################################################################################################//

	Expect.set_DefaultMode("Silent")


//####################################################################################################################//
//##>  Tests                                                                                                        ##//
//####################################################################################################################//

	test("`toEqual` results are valid", ()=>{
		expect(  Expect(true      ).toEqual(true      )  ).toBe(true)
		expect(  Expect(false     ).toEqual(false     )  ).toBe(true)
		expect(  Expect({a:1, b:2}).toEqual({a:1, b:2})  ).toBe(true)
	})

	test("`not` negates properly", ()=>{
		expect(  Expect(true      ).not.toEqual(false)  ).toBe(true)
		expect(  Expect(false     ).not.toEqual(true )  ).toBe(true)
		expect(  Expect(1         ).not.toEqual(2    )  ).toBe(true)
		expect(  Expect(1         ).not.toEqual("1"  )  ).toBe(true)
		expect(  Expect("1"       ).not.toEqual(1    )  ).toBe(true)
		expect(  Expect({a:1, b:2}).not.toEqual({a:1})  ).toBe(true)
	})

	test("`toMatchObject` results are valid", ()=>{
		expect(  Expect({a:1, b:2}).toMatchObject({a:1})  ).toBe(true )
		expect(  Expect({a:1, b:2}).toMatchObject({a:2})  ).toBe(false)
	})

	test("`toThrow` results are valid", ()=>{
		expect(  Expect(() => {throw new Error()}).toThrow()      ).toBe(true )
		expect(  Expect(() => {                 }).toThrow()      ).toBe(false)
		expect(  Expect(() => {throw new Error()}).not.toThrow()  ).toBe(false)
		expect(  Expect(() => {                 }).not.toThrow()  ).toBe(true )
	})

	test("`toThrow` calls do not actually throw", ()=>{
		expect(  (() => Expect(() => {throw new Error()}).toThrow()    )  ).not.toThrow()
		expect(  (() => Expect(() => {throw new Error()}).not.toThrow())  ).not.toThrow()
	})
